parameters:
  - name: account_name
    type: string
  - name: account_key
    type: string
  - name: account_type
    type: string
  - name: container
    type: string
  - name: temp_dir
    type: string
  - name: mount_dir
    type: string  
  - name: block_size
    type: number  


steps:  
  - script: |
      sudo apt-get update --fix-missing
      sudo apt-get install python3-setuptools -y
      sudo apt install python3-pip -y
    displayName: "Setup test environemnt"
    
  - script: |
      $(WORK_DIR)/blobfuse2 gen-test-config --config-file=$(WORK_DIR)/testdata/config/azure_data_integrity.yaml --container-name=${{ parameters.container }} --temp-path=${{ parameters.temp_dir }} --output-file=dataInegrityConfig.yaml
    displayName: 'Create Config File for Data Integrity checks'
    env:
      NIGHTLY_STO_ACC_NAME: ${{ parameters.account_name }}
      NIGHTLY_STO_ACC_KEY: ${{ parameters.account_key }}
    continueOnError: false

  - script:
      cat dataInegrityConfig.yaml
    displayName: 'Print config file'

  # ----------------------------------------------------------------------------------------------------------------
  # Full file write and read
  - script: |
      $(WORK_DIR)/blobfuse2 mount ${{ parameters.mount_dir }} --config-file=dataInegrityConfig.yaml --default-working-dir=$(WORK_DIR) --block-cache --block-cache-block-size=${{ parameters.block_size }} --container-name=${{ parameters.container }} --block-cache-pool-size=100
    displayName: "Mount Blobfuse2 : Full file test"

  - script: |
      rm -rf ${{ parameters.temp_dir }}/*test_data*
      rm -rf ${{ parameters.mount_dir }}/*test_data*
      
      for i in {10,13,50,100,973,1024,1048576,1048590,5242880,52428800,52428968,1073741824}
      do
        python3 $(WORK_DIR)/test/dataIntegrity/integrity_script.py write_data ${{ parameters.mount_dir }} ${{ parameters.temp_dir }} $i 3
      done
      
      echo "-----------------  Print Remote Files -----------------------------------"
      ls -l ${{ parameters.mount_dir }}/test_data_*
      echo "-----------------  Print Local Files -----------------------------------"
      ls -l ${{ parameters.temp_dir }}/test_data_*
    displayName: 'Create Full files'

  - script: |
      $(WORK_DIR)/blobfuse2 unmount all
    displayName: "Un-Mount Blobfuse2 : Full file test"

  - script: |
      $(WORK_DIR)/blobfuse2 mount ${{ parameters.mount_dir }} --config-file=dataInegrityConfig.yaml --default-working-dir=$(WORK_DIR) --block-cache --block-cache-block-size=${{ parameters.block_size }} --container-name=${{ parameters.container }}
    displayName: "Re-Mount Blobfuse2 : Full file test"

  - script: |
      for i in {10,13,50,100,973,1024,1048576,1048590,5242880,52428800,52428968,1073741824}
      do
        python3 $(WORK_DIR)/test/dataIntegrity/integrity_script.py read_data ${{ parameters.mount_dir }} ${{ parameters.temp_dir }} $i 3
      done

  - script: |
      echo "-----------------  Print Remote Files -----------------------------------"
      cd ${{ parameters.mount_dir }}
      ls -l test_data_*
      md5sum -b test_data_* > $(WORK_DIR)/remote_full.md5
      
      echo "-----------------  Print Local Files -----------------------------------"
      cd ${{ parameters.temp_dir }}
      ls -l test_data_*
      md5sum -b test_data_* > $(WORK_DIR)/local_full.md5
      
      echo "-----------------  Validate checksum -----------------------------------"
      cd $(WORK_DIR)
      cat *full.md5
      
      diff remote_full.md5 local_full.md5
      if [ $? -ne 0 ]; then
        exit 1
      fi
    displayName: 'Validate Full files'

  - script: |
      rm -rf *full*
      rm -rf ${{ parameters.temp_dir }}/test_data_*
      rm -rf ${{ parameters.mount_dir }}/test_data_*
    displayName: 'Cleanup Full files'

  - script: |
      $(WORK_DIR)/blobfuse2 unmount all
    displayName: 'Unmount Blobfuse2'

  # End the test now
  - template: 'cleanup.yml'
    parameters:
      working_dir: $(WORK_DIR)
      mount_dir: ${{ parameters.mount_dir }}
      temp_dir: ${{ parameters.temp_dir }}   

  # ----------------------------------------------------------------------------------------------------------------
  # Sparse file testing
  - script: |
      $(WORK_DIR)/blobfuse2 mount ${{ parameters.mount_dir }} --config-file=dataInegrityConfig.yaml --default-working-dir=$(WORK_DIR) --block-cache --block-cache-block-size=${{ parameters.block_size }} --container-name=${{ parameters.container }} --block-cache-pool-size=100
    displayName: "Mount Blobfuse2 : Sparse file test"

  - script: |
      rm -rf ${{ parameters.temp_dir }}/*sparse*
      rm -rf ${{ parameters.mount_dir }}/*sparse*
      
      for i in {10,13,50,100,973,1024,1048576,1048590,5242880,52428800,52428968,1073741824}
      do
        python3 $(WORK_DIR)/test/dataIntegrity/integrity_script.py create_sparse ${{ parameters.mount_dir }} ${{ parameters.temp_dir }} $i 3
      done
      
      echo "-----------------  Print Remote Files -----------------------------------"
      ls -l ${{ parameters.mount_dir }}/sparse_*
      echo "-----------------  Print Local Files -----------------------------------"
      ls -l ${{ parameters.temp_dir }}/sparse_*
    displayName: 'Create sparse files'

  - script: |
      $(WORK_DIR)/blobfuse2 unmount all
    displayName: "Un-Mount Blobfuse2 : Sparse file test"

  - script: |
      $(WORK_DIR)/blobfuse2 mount ${{ parameters.mount_dir }} --config-file=dataInegrityConfig.yaml --default-working-dir=$(WORK_DIR) --block-cache --block-cache-block-size=${{ parameters.block_size }} --container-name=${{ parameters.container }}
    displayName: "Re-Mount Blobfuse2 : Sparse file test"

  - script: |
      # Check sparse files
      echo "-----------------  Print Remote Files -----------------------------------"
      cd ${{ parameters.mount_dir }}
      ls -l sparse_*
      md5sum -b sparse_* > $(WORK_DIR)/remote_sparse.md5
      
      echo "-----------------  Print Local Files -----------------------------------"
      cd ${{ parameters.temp_dir }}
      ls -l sparse_*
      md5sum -b sparse_* > $(WORK_DIR)/local_sparse.md5
      
      echo "-----------------  Validate checksum -----------------------------------"
      cd $(WORK_DIR)
      cat *sparse*.md5
      
      diff remote_sparse.md5 local_sparse.md5
      if [ $? -ne 0 ]; then
        exit 1
      fi
    displayName: 'Validate sparse files'

  - script: |
      rm -rf *sparse*
      rm -rf ${{ parameters.temp_dir }}/sparse_*
      rm -rf ${{ parameters.mount_dir }}/sparse_*
    displayName: 'Cleanup sparse files'

  - script: |
      $(WORK_DIR)/blobfuse2 unmount all
    displayName: 'Unmount Blobfuse2'

  # End the test now
  - template: 'cleanup.yml'
    parameters:
      working_dir: $(WORK_DIR)
      mount_dir: ${{ parameters.mount_dir }}
      temp_dir: ${{ parameters.temp_dir }}        
  
  
  # ----------------------------------------------------------------------------------------------------------------
  # Sparse files wit front hole testing
  - script: |
      $(WORK_DIR)/blobfuse2 mount ${{ parameters.mount_dir }} --config-file=dataInegrityConfig.yaml --default-working-dir=$(WORK_DIR) --block-cache --block-cache-block-size=${{ parameters.block_size }} --container-name=${{ parameters.container }} --block-cache-pool-size=100
    displayName: "Mount Blobfuse2 : Sparse file with front hole test"

  - script: |
      rm -rf ${{ parameters.temp_dir }}/*front_hole*
      rm -rf ${{ parameters.mount_dir }}/*front_hole*

      for i in {10,13,50,100,973,1024,1048576,1048590,5242880,52428800,52428968,1073741824}
      do
        python3 $(WORK_DIR)/test/dataIntegrity/integrity_script.py create_front_hole ${{ parameters.mount_dir }} ${{ parameters.temp_dir }} $i 3
      done

      echo "-----------------  Print Remote Files -----------------------------------"
      ls -l ${{ parameters.mount_dir }}/front_hole_*
      echo "-----------------  Print Locak Files -----------------------------------"
      ls -l ${{ parameters.temp_dir }}/front_hole_*
    displayName: 'Create sparse files with front hole'

  - script: |
      $(WORK_DIR)/blobfuse2 unmount all
    displayName: "Un-Mount Blobfuse2 : Sparse file with front hole test"

  - script: |
      $(WORK_DIR)/blobfuse2 mount ${{ parameters.mount_dir }} --config-file=dataInegrityConfig.yaml --default-working-dir=$(WORK_DIR) --block-cache --block-cache-block-size=${{ parameters.block_size }} --container-name=${{ parameters.container }}
    displayName: "Re-Mount Blobfuse2 : Sparse file with front hole test"

  - script: |
      # Check sparse files with front hole
      echo "-----------------  Print Remote Files -----------------------------------"
      cd ${{ parameters.mount_dir }}
      md5sum -b front_hole_* > $(WORK_DIR)/remote_front_hole.md5
      ls -l front_hole_*
      
      echo "-----------------  Print Local Files -----------------------------------"
      cd ${{ parameters.temp_dir }}
      ls -l front_hole_*
      md5sum -b front_hole_* > $(WORK_DIR)/local_front_hole.md5
      
      echo "-----------------  Validate checksum -----------------------------------"
      cd $(WORK_DIR)
      cat *front_hole*.md5
      
      diff remote_front_hole.md5 local_front_hole.md5
      if [ $? -ne 0 ]; then
        exit 1
      fi
    displayName: 'Validate sparse files with front hole'

  - script: |
      rm -rf *front_hole*
      rm -rf ${{ parameters.temp_dir }}/front_hole_*
      rm -rf ${{ parameters.mount_dir }}/front_hole_*
    displayName: 'Cleanup sparse files with front hole'

  - script: |
      $(WORK_DIR)/blobfuse2 unmount all
    displayName: 'Unmount Blobfuse2'
    
  # End the test now
  - template: 'cleanup.yml'
    parameters:
      working_dir: $(WORK_DIR)
      mount_dir: ${{ parameters.mount_dir }}
      temp_dir: ${{ parameters.temp_dir }}  

  # ----------------------------------------------------------------------------------------------------------------
